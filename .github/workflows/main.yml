name: development
on: 
  push:
    branches:
      - master
  workflow_dispatch:  
env:
  DATABASE_USERNAME: ${{ secrets.USERNAME }}
  global-level: ${{ vars.global_level }} 
jobs:
  checkout-job:
     runs-on: self-hosted
     steps:
       - name: checking out code
         uses: actions/checkout@v4      
  infra-build:
     runs-on: self-hosted
     needs: checkout-job     
     steps:
       - name: list the directory in target folder
         run: ls -lrt      
       - name: Navigate to the Terraform code Directory
         run: |
              cd terrform-code      
              terraform init 
              terraform apply -auto-approve
              
         id: tfapply
       - name: Capture Terraform Outputs
         id: capture_output
         run: echo "::set-output name=terraform_outputs::$(terraform output -json)"  
       - name: Upload Terraform State
         uses: actions/upload-artifact@v2
         with:
           name: terraform-state
           path: terrform-code/terraform.tfstate  
  app-build:
     env:
        job-level: ${{ vars.job_level }}
     needs: infra-build
     runs-on: self-hosted
     steps: 
       - name: Download Terraform State
         uses: actions/download-artifact@v2
         with:
           name: terraform-state
       - name: Extract Terraform Outputs
         id: extract_outputs
         run: echo "::set-output name=terraform_outputs::$(cat terraform-state/terraform.tfstate | jq '.outputs')"
       - name: list the content of the directory
         run: echo "This is ${{ env.global-level }} , ${{ env.job-level }} and ${{ env.step-level }} variables in a single shell command" 
       - name: build of the application
         run: mvn clean install
         env:
             step-level: ${{ vars.step_level }}                
  package-upload:
     needs: app-build
     runs-on: self-hosted
     steps: 
       - name: list the directory in target folder
         run: ls -lrt target
       - name: upload war file package
         uses: actions/upload-artifact@v4
         with:
           name: war-file
           path: target/spring-boot-app-1.4.0.RELEASE.jar
  docker-image-build:
    needs: package-upload
    runs-on: self-hosted
    steps: 
       - name: download war file package
         uses: actions/download-artifact@v4  
         with:
           name: war-file         
       - name: echo the database username
         run: echo "$DATABASE_USERNAME"
       - name: Set up Docker Buildx
         run: docker build -t haciac.azurecr.io/hce:${{ github.run_number }}-DEV .
       - name: Docker Push Image to registry 
         run:  docker push haciac.azurecr.io/hce:${{ github.run_number }}-DEV
  docker-image-deployment:
    needs: docker-image-build
    runs-on: self-hosted
    steps: 			  
       - name: application deployment 
         run: |
           chmod 775 application-run.sh
           ./application-run.sh	
